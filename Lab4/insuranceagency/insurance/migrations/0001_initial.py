# Generated by Django 4.2.1 on 2023-06-03 16:48

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('otp1', models.IntegerField(null=True)),
                ('phone_number', models.CharField(blank=True, max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Телефонный номер должен быть введен в формате: '+37529xxxxxxx'. Разрешено до 15 цифр", regex='^\\+37529\\d{7}$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InsuranceAgent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=20, verbose_name='Имя агента')),
                ('total_earning', models.FloatField(default=0, help_text='Общий заработок', verbose_name='Общий заработок')),
                ('last_name', models.CharField(max_length=30, verbose_name='Фамилия агента')),
                ('surname', models.CharField(max_length=30, verbose_name='Отчество агента')),
                ('address', models.CharField(max_length=30, verbose_name='адрес агента')),
                ('phone_number', models.CharField(blank=True, max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Телефонный номер должен быть введен в формате: '+37529xxxxxxx'. Разрешено до 15 цифр", regex='^\\+37529\\d{7}$')])),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Страховые агенты',
                'verbose_name_plural': 'Страховые агенты',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='InsuranceBranch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Название филиала')),
                ('address', models.CharField(max_length=30, verbose_name='адрес филиала')),
                ('phone_number', models.CharField(blank=True, max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Телефонный номер должен быть введен в формате: '+37529xxxxxxx'. Разрешено до 15 цифр", regex='^\\+37529\\d{7}$')])),
                ('tariff_rate', models.FloatField(help_text='Тарифная ставка', verbose_name='Тарифная ставка')),
            ],
            options={
                'verbose_name': 'Страховые филиалы',
                'verbose_name_plural': 'Страховые филиалы',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='InsuranceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Вид страхования')),
                ('content', models.TextField(blank=True, verbose_name='Информация об страховании')),
                ('photo', models.ImageField(upload_to='photos/%Y/%m/%d/', verbose_name='Фото')),
                ('ins_coef', models.FloatField(help_text='Страховой коэффициент услуги (цена объекта * Страховой коэффициент услуги)', verbose_name='Страховой коэффициент услуги')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Виды страхования',
                'verbose_name_plural': 'Виды страхования',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ObjectOfInsurance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insured_risks', models.CharField(choices=[('Высокие', 'High'), ('Нормальные', 'Normal'), ('Низкие', 'Low')], default='Низкие', max_length=11)),
                ('cost', models.FloatField(verbose_name='Цена объекта')),
                ('ins_cat', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='insurance.insurancecategory', verbose_name='Вид страхования')),
            ],
            options={
                'verbose_name': 'Объекты страхования',
                'verbose_name_plural': 'Объекты страхования',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='InsuranceContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_create', models.DateTimeField(auto_now=True, verbose_name='Дата и время заключения')),
                ('time_end', models.DateTimeField(verbose_name='Дата и время окончания договора')),
                ('total_cost', models.FloatField(help_text='Общая цена услуги', verbose_name='Общая цена услуги')),
                ('ins_agent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='insurance.insuranceagent', verbose_name='агент страхования')),
                ('ins_client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='агент страхования')),
                ('ins_object', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='insurance.objectofinsurance', verbose_name='Объект страхования')),
            ],
            options={
                'verbose_name': 'Страховые договоры',
                'verbose_name_plural': 'Страховые договоры',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='insuranceagent',
            name='ins_branch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='insurance.insurancebranch', verbose_name='Филиал страхования'),
        ),
    ]
